#include "MyLib.h"
#include <array>
#include <vector>
#include <iostream>
#include <iomanip>
#include <string>


using namespace std;

void PrintVector(vector <int>& v) {
	for (int& n : v)
		cout << n << " ";
}

void info1() {

	// extra info 
	// if you want to delete elements from the vector use the .erase() method
	// vector.erase(string index (iterator ) , ending index (not included)(iterator))
	// delete all the vector -> numbers.erase(numbers.begin(), numbers.end());
	vector<int> nums{1, 2, 3, 4, 5};
	
	vector<int>::iterator iter = nums.begin(); // assigned to index 1
	nums.erase(iter + 1, iter + 3); // from index 1 to index 2
	
	for (vector<int>::iterator it = nums.begin(); it < nums.end() ; it++)
		cout << *it << " ";
	
}
void info2() {

	vector<int> nums{ 1, 2, 3, 4 };

	int* p = nums.data(); // returns a pointer that points to the vector's first element
	cout << *(p) << endl << *(nums.begin() + 1) << endl;
	cout << p << " " << p + 1 << endl;

}

void info3() {
	vector<int> nums{ 1, 2, 3, 4 };
	
	nums.insert(nums.end(), 5);
	
	for (int& num : nums)
		cout << num << " ";

}

void info4() {
	
	vector<int> nums{ 1, 2, 3, 4 };
	
	cout << nums.capacity() << endl; //	Returns the number of elements that a vector's reserved memory is able to store
	
	nums.reserve(6); // changing the capacity pratically
	
	cout << nums.capacity() << endl;


	nums.push_back(10);
	nums.push_back(20);
	nums.push_back(20);

	cout << nums.capacity() << endl;
	
	nums.shrink_to_fit(); // make the vector allocate a fit number of memory

	cout << nums.capacity() << endl;
	

}


void info5() {
	
	 
	vector<int> num1{ 1, 2,3 };
	vector<int> num2{ 4, 5,6 };
	
	num1.swap(num2);
	PrintVector(num1); 
	cout << endl;
	PrintVector(num2);

}

void info6() {
	vector<int> num{ 1, 2,3 };
	PrintVector(num);
	num.clear();
	PrintVector(num);
}

void info7() {
	vector <int> num{ 1,2,3 };
	num.resize(5);
	PrintVector(num);
}
